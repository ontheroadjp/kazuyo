#!/bin/bash
set -Ceu

# Constants
EXT="(JPG|jpg|jpeg|PNG|png|TIFF|TIF|tiff|tif|CR2|NEF|ARW|MOV|mov|AVI|avi)"

# Directory
BASE_DIR=''
DIST_DIR=''
DUPLICATE_DIR=''

# Photo files buffer (for unique photo files)
DATE_TIME_ORIGINAL=()
CREATE_DATE=()
MODIFY_DATE=()
FILE_MODIFY_DATE=()

# Logging
LOG_INFO=1
LOG_DEBUG=2

IS_DEBUGGING=true
if ${IS_DEBUGGING}; then
    set -x
    LOG_LEVEL=${LOG_DEBUG}
else
    LOG_LEVEL=${LOG_INFO}
fi

# param: $@
function _param_check() {
    if [ $# -ne 1 ]; then die "[Error] Paramater shuld be one parameter."; fi
    if [ ! -e ${1} ]; then die "[Error] ${1} does not exist."; fi
    if [ ! -d ${1} ]; then die "[Error] Parameter shuld be directory."; fi
}

# param: $@
function _init() {
    BASE_DIR=$(echo $@ | sed -e 's:\/$::') # remove last '/'
    DIST_DIR="${BASE_DIR}/dist"
    DUPLICATE_DIR="${DIST_DIR}/duplicate"
    mkdir -p ${DUPLICATE_DIR}
    _init_report "${DIST_DIR}/report.txt"
    _log "[INFO] Initialized on $(date)\n" ${LOG_INFO}
    _log "[DEBUG] ---------------------------------------------------\n" ${LOG_DEBUG}
    _log "[DEBUG] BASE_DIR      : ${BASE_DIR}\n" ${LOG_DEBUG}
    _log "[DEBUG] DIST_DIR      : ${DIST_DIR}\n" ${LOG_DEBUG}
    _log "[DEBUG] DUPLICATE_DIR : ${DUPLICATE_DIR}\n" ${LOG_DEBUG}
    _log "[DEBUG] LOG_LEVEL     : ${LOG_LEVEL}\n" ${LOG_DEBUG}
    _log "[DEBUG] IS_DEBUGGING  : $(echo ${IS_DEBUGGING})\n" ${LOG_DEBUG}
    _log "[DEBUG] ---------------------------------------------------\n" ${LOG_DEBUG}
}

# $1: exif_date, $2: file extention
function _get_date_filename() {
    echo $(echo $1 | sed 's/://g' | sed 's/ /-/g').$2
}

# $1: single or multiple file path
function _parse_all_photo_files() {
    local files=($@)

    count=1
    for file in ${files[@]}; do
        _log "[DATA] ${count}/${#files[@]}," ${LOG_DEBUG}

        local md5=$(md5sum "${file}")
        local extension=${file##*.}
        local hash=$(_get_hash_value "${md5}")
        local hash_file="${DIST_DIR}/$(_get_hash_filename "${md5}" ${extension})"
        local exif_date_tag=$(_guess_create_date ${file} | cut -d ',' -f 1)
        local date_filename=$(
                _guess_create_date ${file} | \
                cut -d ',' -f 2 | \
                sed 's/://g' | \
                sed 's/ /-/'
            ).${extension}
        local duplicate_file=${DUPLICATE_DIR}/${date_filename}
        local is_unique=''
        local move_to=""

        # unique photo file
        [ ! -e "${hash_file}" ] && {
            is_unique=true
            move_to="Y/M/D/yyyymmdd/${date_filename}"
            mv -n "${file}" "${hash_file}"
            _log "(UNIQUE)," ${LOG_DEBUG}

        # duplicate photo file
        } || {
            is_unique=false
            [ -e ${duplicate_file} ] && {
                local no=$(find ${DUPLICATE_DIR} -name ${date_filename} | wc -l | tr -d ' ')
                date_filename=${date_filename%.*}-${no}.${extension}
                duplicate_file=${duplicate_file%.*}-${no}.${extension}
            }
            move_to=${duplicate_file}
            mv ${file} ${move_to}
            _log "(DUPLICATE)," ${LOG_DEBUG}
        }

        # generate unique photo file(s)
        if "${is_unique}"; then
            case "${exif_date_tag}" in
                "DateTimeOriginal" ) DATE_TIME_ORIGINAL+=(${hash_file}) ;;
                "CreateDate" ) CREATE_DATE+=(${hash_file}) ;;
                "ModifyDate" ) MODIFY_DATE+=(${hash_file}) ;;
                "FileModifyDate" ) FILE_MODIFY_DATE+=(${hash_file}) ;;
            esac
        fi

        _log "${file},${hash},${exif_date_tag},${move_to}\n" ${LOG_DEBUG}
        count=$((${count} + 1))
    done # end of for-loop
}

# no param
function _rename_by_date_tag_and_mv() {

    # $1: 'exif tag name', $2: destination, $3: file list
    function _exec() {
        local tag=$1; shift; local destination=$1; shift; local buff=($@)

        [ ${#buff[@]} -ne 0 ] && {
            _log "[INFO] Generate for ${tag} (${#buff[@]} files): " ${LOG_INFO}
            for file in ${buff[@]}; do
                exiftool "-FileName < ${tag}" -d ${destination} ${file}
            done
            [ $? ] && _log "success.\n" ${LOG_INFO} || _log "error.\n" ${LOG_INFO}
        }
    }

    local out="${DIST_DIR}/%Y年/%m月/%Y%m%d/%Y%m%d-%H%M%S%%-c.%%e"
    set +eu
    _exec "DateTimeOriginal" ${out} ${DATE_TIME_ORIGINAL[@]}
    _exec "CreateDate" ${out} ${CREATE_DATE[@]}
    _exec "ModifiDate" ${out} ${MODIFY_DATE[@]}
    _exec "FileModifyDate" ${out} ${FILE_MODIFY_DATE[@]}
    set -eu
}

# param: $@
function _main() {
    . ./lib/file_utilities.fnc
    . ./lib/exiftool.fnc
    . ./lib/report.fnc

    _param_check "$@"
    _init "$@"

    STASH_IFS=${IFS}; IFS=$'\n'

        # file list in original filename.
        local files=(
            $(find -E ${BASE_DIR} -type f -regex "^.*\.${EXT}$" | sort -k 2,2)
        )
        if [ ${#files} -eq 0 ]; then
            _log "[INFO] no photo file.\n" ${LOG_INFO}
            echo "no photo file."
            exit 0
        fi

        # list of original file
        : >| ${DIST_DIR}/original_files.md5
        for f in ${files[@]}; do
            md5sum ${f} |>> ${DIST_DIR}/original_files.md5
        done

        _log "[INFO] Files formatting..." ${LOG_INFO}
        _filename_formatter ${files[@]} && _log "ok\n" ${LOG_INFO}

    IFS=${STASH_IFS}

    # file list in formatted filename.
    files=(
        $(find -E ${BASE_DIR} -type f -regex "^.*\.${EXT}$" | sort -k 2,2)
    )

    _log "[INFO] Parse ${#files[@]} photo file(s).\n" ${LOG_INFO}
    _parse_all_photo_files ${files[@]}

    _log "[INFO] rename and move files...\n" ${LOG_INFO}
    _rename_by_date_tag_and_mv

    _log "[INFO] All done\n" ${LOG_INFO}
}

#trap $(_log "\ntrap.\n" ${LOG_INFO}) 1 2 3 15

_main "$@"

exit 0;
