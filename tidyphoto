#!/bin/bash
set -Ceu

# Constants
EXT="(JPG|jpg|jpeg|PNG|png|TIFF|TIF|tiff|tif|CR2|NEF|ARW|MOV|mov)"

# Directory
BASE_DIR=''
DIST_DIR=''

# Photo files buffer (for unique photo files)
DATE_TIME_ORIGINAL=()
CREATE_DATE=()
MODIFY_DATE=()
FILE_MODIFY_DATE=()

# Photo files buffer (for duplicate photo files)
DATE_TIME_ORIGINAL_DUPLICATE=()
CREATE_DATE_DUPLICATE=()
MODIFY_DATE_DUPLICATE=()
FILE_MODIFY_DATE_DUPLICATE=()

## Logging
LOG_INFO=1
LOG_DEBUG=2
##LOG_FILE=''

source ./lib/report.fnc
source ./lib/file_utilities.fnc
#source ./lib/logging.fnc

IS_DEBUGGING=true
if ${IS_DEBUGGING}; then
    set -x
    LOG_LEVEL=${LOG_DEBUG}
else
    LOG_LEVEL=${LOG_INFO}
fi

# param: $@
function _param_check() {
    [ $# -ne 1 ] && die "[Error] Paramater shuld be one parameter."
    [ ! -e $@ ] && die "[Error] $@ does not exist."
    [ ! -d $@ ] && die "[Error] Parameter shuld be directory."
    echo 0 > /dev/null 2>&1
}

# param: $@
function _init() {
    BASE_DIR=$(echo $@ | sed -e 's:\/$::') # remove last '/'
    DIST_DIR="${BASE_DIR}/dist"
    mkdir -p ${DIST_DIR}/duplicates
    _log "[INFO] Initialized on $(date)\n" ${LOG_INFO}
    _log "[DEBUG] ---------------------------------------------------\n" ${LOG_DEBUG}
    _log "[DEBUG] BASE_DIR   : ${BASE_DIR}\n" ${LOG_DEBUG}
    _log "[DEBUG] DIST_DIR   : ${DIST_DIR}\n" ${LOG_DEBUG}
    _log "[DEBUG] LOG_LEVEL  : ${LOG_LEVEL}\n" ${LOG_DEBUG}
    _log "[DEBUG] IS_DEBUGGING : $(echo ${IS_DEBUGGING})\n" ${LOG_DEBUG}
    _log "[DEBUG] ---------------------------------------------------\n" ${LOG_DEBUG}
    echo 0 > /dev/null 2>&1
}

# $1: exif_date, $2: file extention
function _get_date_filename() {
    echo $(echo $1 | sed 's/://g' | sed 's/ /-/g').$2
}

# no param
function _parse_all_photo_files() {
    files=($(find -E ${BASE_DIR} -type f -regex "^.*\.${EXT}$" | sort -k 2,2))
    _log "[INFO] Parse ${#files[@]} photo files.\n" ${LOG_INFO}
    count=1
    for file in ${files[@]}; do
        _log "[INFO] ${count}/${#files[@]}\n" ${LOG_INFO}
        _log "[DATA] " ${LOG_DEBUG}

        md5=$(md5sum "${file}")
        hash=$(_get_hash_value "${md5}")
        original_filename=$(_get_original_filename "${md5}")
        hash_filename=$(_get_hash_filename "${md5}" ${original_filename##*.})
        is_unique=''
        move_to=''

        # unique photo file
        [ ! -e "${DIST_DIR}/${hash_filename}" ] && {
            is_unique=true
            move_to="${DIST_DIR}/${hash_filename}"
            mv -n "${file}" "${move_to}"
            _log "(UNIQUE)," ${LOG_DEBUG}

        # duplicate photo file
        } || {
            is_unique=false
            move_to=${file}
            _log " (DUPLICATE)," ${LOG_DEBUG}
        }

        _log "${original_filename},${hash}," ${LOG_DEBUG}

        exif_tags=( 'DateTimeOriginal' 'CreateDate' 'ModifyDate' 'FileModifyDate')

        for tag in ${exif_tags}; do
            exif_date=$(exiftool "-${tag}" -s -S ${move_to})
            [ "${exif_date}" != '' ] && {
                if ${is_unique}; then
                    case "${tag}" in
                        "DateTimeOriginal" ) DATE_TIME_ORIGINAL+=(${move_to}) ;;
                        "CreateDate" ) CREATE_DATE+=(${move_to}) ;;
                        "ModifyDate" ) MODIFY_DATE+=(${move_to}) ;;
                        "FileModifyDate" ) FILE_MODIFY_DATE+=(${move_to}) ;;
                    esac
                else
                    case "${tag}" in
                        "DateTimeOriginal" ) DATE_TIME_ORIGINAL_DUPLICATE+=(${move_to}) ;;
                        "CreateDate" ) CREATE_DATE_DUPLI+=(${move_to}) ;;
                        "ModifyDate" ) MODIFY_DATE_DUPLI+=(${move_to}) ;;
                        "FileModifyDate" ) FILE_MODIFY_DATE_DUPLI+=(${move_to}) ;;
                    esac
                fi
                _log "${tag},$(_get_date_filename "${exif_date}" ${move_to##*.})\n" ${LOG_DEBUG}
                continue
            }
        done # end of for tag
        count=$((${count} + 1))
    done # end of for file
}

# no param
function _rename_by_date_tag_and_mv() {
    _log "[INFO] rename and move files...\n" ${LOG_INFO}

    function _exec() {
        tag=$1; shift; destination=$1; shift; buff=($@)

        [ ${#buff[@]} -ne 0 ] && {
            _log "[INFO] Generate for ${tag} (${#buff[@]} files): " ${LOG_INFO}
            exiftool "-FileName < ${tag}" -d ${destination} ${buff[@]}
            [ $? ] && _log "success.\n" ${LOG_INFO} || _log "error.\n" ${LOG_INFO}
        }
    }

    local out="${DIST_DIR}/%Y年/%m月/%Y%m%d/%Y%m%d-%H%M%S%%-c.%%e"
    set +eu
    _exec "DateTimeOriginal" ${out} ${DATE_TIME_ORIGINAL[@]}
    _exec "CreateDate" ${out} ${CREATE_DATE[@]}
    _exec "ModifiDate" ${out} ${MODIFY_DATE[@]}
    _exec "FileModifyDate" ${out} ${FILE_MODIFY_DATE[@]}
    _exec "DateTimeOriginal" ${out} ${DATE_TIME_ORIGINAL_DUPLICATE[@]}
    _exec "CreateDate" ${out} ${DATE_TIME_ORIGINAL_DUPLICATE[@]}
    _exec "ModifyDate" ${out} ${DATE_TIME_ORIGINAL_DUPLICATE[@]}
    _exec "FileModifyDate" ${out} ${DATE_TIME_ORIGINAL_DUPLICATE[@]}
    set -eu
}

function _create_exif_file() {
    for file in $(find $@ -type f | grep -E "^.*\.${EXT}$"); do
        _log "[EXIF] Create EXIF file: " ${LOG_DEBUG}
        if [ ! -e "${file}.exif" ]; then
            exiftool -s ${file} > ${file}.exif
            sed -i "" -e '/^FileName/d' ${file}.exif
            sed -i "" -e '/^Directory/d' ${file}.exif
            sed -i "" -e '/^FileType/d' ${file}.exif
            sed -i "" -e '/^FileSize/d' ${file}.exif
            sed -i "" -e '/^FileTypeExtension/d' ${file}.exif
            sed -i "" -e '/^FileModifyDate/d' ${file}.exif
            sed -i "" -e '/^FileAccessDate/d' ${file}.exif
            sed -i "" -e '/^FileInodeChangeDate/d' ${file}.exif
            sed -i "" -e '/^FilePermissions/d' ${file}.exif
            sed -i "" -e '/^Orientation/d' ${file}.exif
            sed -i "" -e '/^Compression/d' ${file}.exif
            echo "create: ${file}.exif"
        fi
        _log "${file}.exif\n" ${LOG_DEBUG}
    done
}

function _remove_exiffiles() {
    rm $(find $@ -type f -name "*.exif");
}

# param: $@
function _main() {
     if _param_check $@ && _init $@; then
        _replace_space_to_underbar_within_filename
        _parse_all_photo_files
        _rename_by_date_tag_and_mv
        _log "[INFO] All done\n" ${LOG_INFO}
     fi
}

trap $(_log "\ntrap.\n" ${LOG_INFO}) 1 2 3 15

_main "$@"

exit 0;
